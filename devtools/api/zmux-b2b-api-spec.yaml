openapi: 3.0.3
info:
  title: Zmux – B2B Client API
  version: 1.0.1
  description: |
    B2B client API for reading Zmux channels configuration and performing partial updates.

    This API specification is proprietary and confidential.
    Distribution or disclosure is prohibited unless explicitly authorized.

    - **Transport**: HTTPS only
    - **Authentication**: Client MUST include Bearer token via `Authorization` header
    - **Request Tracing**: Client MAY include `X-Request-ID` header; echoed back or generated by the server

  contact:
    name: Zmux Support

  license:
    name: Private License – Do Not Distribute
    url: https://internal.zmux/license-info

servers:
  - url: http://127.0.0.1:8080
    description: Production

security:
  - bearerAuth: []

tags:
  - name: Channels
    description: Operations for managing and querying Zmux channels.

paths:
  /api/channels:
    get:
      tags: [Channels]
      summary: List channel configurations
      operationId: listChannels
      description: |
        Returns all channels visible to the client.

        - `200` with `[]` when no channels are authorized.
        - `403` if the client is not permitted to use this endpoint.

      parameters:
        - $ref: "#/components/parameters/X-Request-ID"
      responses:
        "200":
          description: OK — array of authorized `Channel` objects, each representing a single channel as defined by its configuration; empty if none.
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelList"
              examples:
                authorizedChannels:
                  summary: Authorized channels
                  value:
                    - id: 1
                      name: Live1
                      input:
                        url: rtsp://172.16.5.20/live.sdp
                        username: zmuxUser
                        password: "Aa1234$#@!"
                      enabled: true
                    - id: 2
                      name: null
                      input:
                        url: null
                        username: null
                        password: null
                      enabled: false
                    - id: 7
                      name: Live2
                      input:
                        url: rtsp://203.0.113.45:5544/streaming/video1
                        username: null
                        password: null
                      enabled: false
                    - id: 8
                      name: Live3-channel-reserved
                      input:
                        url: null
                        username: null
                        password: null
                      enabled: false
                emptyList:
                  summary: No authorized channels
                  value: []
        "401": { $ref: "#/components/responses/401Unauthorized" }
        "403": { $ref: "#/components/responses/403Forbidden" }
        "429": { $ref: "#/components/responses/429TooManyRequests" }
        "500": { $ref: "#/components/responses/500InternalServerError" }
        "503": { $ref: "#/components/responses/503ServiceUnavailable" }

  /api/channels/{id}:
    patch:
      tags: [Channels]
      summary: Partially update a channel
      operationId: patchChannel
      description: |
        Applies a JSON Merge Patch (RFC 7396) to a channel configuration.

        ### RFC 7396 behavior quick brief
        - Omitting a field → the field **remains unchanged**.
        - Setting a nullable field to `null` → the field is **cleared/removed**.
        - Setting an **object** field to `{}`:
          - If the current value is an object → **no-op** (unchanged).
          - If the field is nullable and the current value is `null` → it becomes `{}` (created).
        - Successful patches return `204 No Content` even if nothing changed.
        - Objects are merged recursively; nested fields follow the same rules.
        - Requires `Content-Type: application/merge-patch+json`.

      parameters:
        - $ref: "#/components/parameters/ChannelId"
        - $ref: "#/components/parameters/X-Request-ID"
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/ChannelPatchRequest"
            examples:
              updateChannel:
                summary: Update channel properties
                description: Sets `name`, `input.url`, `input.username`, `input.password` and enables the channel.
                value:
                  name: "Live1"
                  input:
                    url: "rtsp://172.16.5.20/live.sdp"
                    username: zmuxUser
                    password: "Aa1234$#@!"
                  enabled: true
              disableChannel:
                summary: Pause/deactivate a channel
                value:
                  enabled: false
              enableChannel:
                summary: Resume/activate a channel
                value:
                  enabled: true
              clearChannel:
                summary: Clear/reset channel to null/disabled
                description: Sets `name`, `input.url`, `input.username` and `input.password` to null and disables the channel.
                value:
                  name: null
                  input:
                    url: null
                    username: null
                    password: null
                  enabled: false
      responses:
        "204":
          description: No Content — Channel updated successfully.
          headers:
            Quota-Limit:
              $ref: "#/components/headers/Quota-Limit"
            Quota-Remaining:
              $ref: "#/components/headers/Quota-Remaining"
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
        "400": { $ref: "#/components/responses/400BadRequest" }
        "401": { $ref: "#/components/responses/401Unauthorized" }
        "403": { $ref: "#/components/responses/403Forbidden" }
        "404": { $ref: "#/components/responses/404NotFound" }
        "409":
          description: |
            Conflict — The requested change would exceed the client's quota for concurrently enabled channels.
            The entire patch was discarded. No partial updates occurred.
            This status is **never** returned when quota is unlimited.
          headers:
            Quota-Limit:
              $ref: "#/components/headers/Quota-Limit"
            Quota-Remaining:
              $ref: "#/components/headers/Quota-Remaining"
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
        "415":
          description: Unsupported Media Type — only `application/merge-patch+json` is accepted for patch operations.
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
        "422": { $ref: "#/components/responses/422UnprocessableContent" }
        "423":
          description: |
            Locked — The targeted channel is temporarily locked by another in-flight operation.

            - Requests received while the resource is locked are rejected immediately.
            - Clients could retry after the conflicting operation has completed.
        "429": { $ref: "#/components/responses/429TooManyRequests" }
        "500": { $ref: "#/components/responses/500InternalServerError" }
        "503": { $ref: "#/components/responses/503ServiceUnavailable" }

  /api/channels/status:
    get:
      tags: [Channels]
      summary: List channel statuses
      operationId: listChannelStatuses
      description: |
        Returns the online/offline runtime status for all channels visible to the client.

        - `200` with `[]` when no channels are authorized.
        - `403` if the client is not permitted to use this endpoint.

      parameters:
        - $ref: "#/components/parameters/X-Request-ID"
      responses:
        "200":
          description: OK — array of authorized `ChannelStatus` objects; empty if none.
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelStatusList"
              examples:
                authorizedChannels:
                  summary: Authorized channels
                  value:
                    - id: 1
                      online: true
                    - id: 2
                      online: false
                    - id: 7
                      online: false
                    - id: 8
                      online: false
                emptyList:
                  summary: No authorized channels
                  value: []
        "401": { $ref: "#/components/responses/401Unauthorized" }
        "403": { $ref: "#/components/responses/403Forbidden" }
        "429": { $ref: "#/components/responses/429TooManyRequests" }
        "500": { $ref: "#/components/responses/500InternalServerError" }
        "503": { $ref: "#/components/responses/503ServiceUnavailable" }

  /api/channels/quota:
    get:
      tags: [Channels]
      summary: Get enabled channels quota
      operationId: getQuota
      description: |
        Returns the client's quota for concurrently enabled channels,
        plus current usage.

        - `limit` is the maximum number of channels that may be `enabled: true` at once.
        - `used` is the current count of channels with `enabled: true`.
        - `remaining` = `limit - used`, floored at `0`.
        - **Unlimited quota**: when unlimited, `limit` and `remaining` are `null`. In this case the server never returns `409` for quota.

      parameters:
        - $ref: "#/components/parameters/X-Request-ID"
      responses:
        "200":
          description: OK — Quota info for the client.
          headers:
            X-Request-ID:
              $ref: "#/components/headers/X-Request-ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Quota"
              examples:
                limitedQuota:
                  summary: Limited quota with available capacity
                  value:
                    limit: 3
                    used: 1
                    remaining: 2

                limitedQuotaExhausted:
                  summary: Limited quota fully used
                  description: No more channels can be enabled until one is disabled.
                  value:
                    limit: 3
                    used: 3
                    remaining: 0

                unlimitedQuota:
                  summary: Unlimited quota
                  description: The client can enable an unlimited number of channels.
                  value:
                    limit: null
                    used: 12
                    remaining: null
        "401": { $ref: "#/components/responses/401Unauthorized" }
        "403": { $ref: "#/components/responses/403Forbidden" }
        "429": { $ref: "#/components/responses/429TooManyRequests" }
        "500": { $ref: "#/components/responses/500InternalServerError" }
        "503": { $ref: "#/components/responses/503ServiceUnavailable" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: opaque
  headers:
    X-Request-ID:
      description: Opaque correlation ID for this request (the server echoes `X-Request-ID` or generates one if absent). Used for request correlation and troubleshooting.
      schema:
        type: string
        minLength: 1
        maxLength: 64
    Quota-Limit:
      description: >
        Maximum number of channels that may be enabled concurrently for the authenticated client.
        When quota is unlimited or not enforced, this header is omitted.
      schema:
        type: integer
        format: int64
        minimum: 0
      required: false

    Quota-Remaining:
      description: >
        Remaining number of channels that may be enabled before hitting the quota.
        When quota is unlimited or not enforced, this header is omitted.
      schema:
        type: integer
        format: int64
        minimum: 0
      required: false

  parameters:
    ChannelId:
      name: id
      in: path
      required: true
      description: Unique numeric identifier of the channel.
      schema:
        type: integer
        format: int64
        minimum: 1

    X-Request-ID:
      name: X-Request-ID
      in: header
      required: false
      description: Optional request ID for tracking; echoed by the server.
      schema:
        type: string
        minLength: 1
        maxLength: 64

  responses:
    400BadRequest:
      description: |
        Bad Request — request parsing failed due to **invalid path parameters** or **syntax/structural issues in the JSON payload**, including:

        - **Malformed JSON** (e.g., bad tokens, truncated body)
        - **JSON schema shape violation**:
          - Incorrect data type (i.e., field-type mismatch)
          - Non-nullable property explicitly set to null (i.e., invalid field `null` assignment)
          - Disallowed additional properties (i.e., unknown/unexpected or unauthorized fields)
          - Omitted mandatory properties (i.e., missing required fields)

      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"

    401Unauthorized:
      description: Unauthorized — missing or invalid credentials.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"

    403Forbidden:
      description: |
        Forbidden — the client lacks permission to access the targeted resource.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"

    404NotFound:
      description: |
        Not Found — the targeted resource does not exist.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"

    422UnprocessableContent:
      description: |
        Unprocessable Content (422) — The request was syntactically valid and successfully parsed, 
        but failed validation due to semantically invalid data that violates domain rules or business logic, including:

          - Invalid string length or format (e.g., not a valid uuid or uri)
          - Numeric value out of range
          - Unsupported enum value
          - Cross-field value dependency issues (e.g., `enabled: true` requires `name` and `input.url`)
          - Field-level value blocked by allowlist/denylist logic
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"

    429TooManyRequests:
      description: Too Many Requests — client exceeds defined rate limits or concurrency thresholds.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
    500InternalServerError:
      description: Internal Server Error — unexpected condition occurred.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"
    503ServiceUnavailable:
      description: Service Unavailable — temporarily unavailable due to overload or scheduled maintenance.
      headers:
        X-Request-ID:
          $ref: "#/components/headers/X-Request-ID"

  schemas:
    Channel:
      type: object
      description: |
        Represents a single channel, defined by its configuration.

        - Clients MUST ignore unknown properties in responses.

      properties:
        id:
          type: integer
          format: int64
          description: Unique numeric channel identifier.
          minimum: 1
          readOnly: true
        name:
          type: string
          nullable: true
          description: Channel display name.
          minLength: 1
          maxLength: 100
        input:
          type: object
          description: Channel input media source configuration.
          properties:
            url:
              type: string
              nullable: true
              format: uri
              description: |
                A URL that identifies the source or destination of a multimedia stream.
              maxLength: 2048
            username:
              type: string
              nullable: true
              minLength: 1
              maxLength: 128
              description: |
                Username for authenticating to the media source.
                Raw characters (plain-text, NOT percent-encoded).
            password:
              type: string
              nullable: true
              minLength: 1
              maxLength: 128
              description: |
                Password for authenticating to the media source.
                Raw characters (plain-text, NOT percent-encoded).
          additionalProperties: true
          required: [url, username, password]
        enabled:
          type: boolean
          description: |
            Channel activation state.

            Indicates whether the channel is enabled — that is, whether media reading from the input source is enabled.
            When the channel is disabled, the server does not attempt to connect to the input media source.
      additionalProperties: true
      required: [id, name, input, enabled]

    ChannelList:
      type: array
      description: A list of `Channel` objects.
      items:
        $ref: "#/components/schemas/Channel"

    ChannelPatchRequest:
      description: |
        Subset of channel fields to update.

        ### Cross-field Dependency Rules
        Cross-field validation is evaluated **after** applying the merge patch:

        - `enabled: true` → both `name` and `input.url` must be **non-null**
        - `input.url` non-null → `name` must be **non-null**
        - `input.username` non-null → `input.url` must be **non-null**
        - `input.password` non-null → `input.username` must be **non-null**
        
        Requests violating any cross-field dependency rules → `422 Unprocessable Content`.

      type: object
      properties:
        name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
        input:
          type: object
          properties:
            url:
              type: string
              nullable: true
              format: uri
              minLength: 1
              maxLength: 2048
              description: >
                An **absolute URL** that specifies the source/destination of a multimedia stream.

                ### URI Syntax
                
                  - MUST follow the generic URI syntax [RFC 3986].
                  - MAY be further constrained or extended by the semantics of the specific protocol (scheme).

                ```
                  <schema>://<host>:<port>/<path-and-query>
                ```

                URI syntax violations (e.g., malformed encoding, invalid structure) → `422 Unprocessable Content`.

                ### Authentication

                  - `input.url` **MUST NOT** contain RFC 3986 `userinfo` (e.g., `username[:password]@`). 
                  - Provide credentials via `input.username` and `input.password`.
                
                Requests containing `userinfo` in `input.url` → `422 Unprocessable Content`.

                ### Protocol-Specific Notes

                - **RTSP URIs** MUST conform to [RFC 2326]. RTSP support & versioning:
                    - Supported: RTSP 1.0 (RFC 2326), including `rtsps://` (RTSP 1.0 over TLS).
                    - Not supported: RTSP 2.0 (RFC 7826).
                    - For `rtsps://`, the service forces TCP interleaving so that control and media traverse the TLS connection; if the server requires UDP under `rtsps://`, the connection fails.

                ### Access Policy (Allow/Deny Lists)

                The server MAY enforce internal allow/deny lists over schemes, hostnames, ports, or any other URI component.
                These lists MAY vary by client, tenant, or deployment. Any URI referencing a disallowed resource → `422 Unprocessable Content`.

                ### References

                  - [RFC 3986] Uniform Resource Identifier (URI): Generic Syntax
                  - [RFC 2326] Real Time Streaming Protocol (RTSP) 1.0

            username:
              type: string
              nullable: true
              minLength: 1
              maxLength: 128
              description: |
                Username for authenticating to the media source.
                Raw characters (plain-text, NOT percent-encoded).
            password:
              type: string
              nullable: true
              minLength: 1
              maxLength: 128
              description: |
                Password for authenticating to the media source.
                Raw characters (plain-text, NOT percent-encoded).
          additionalProperties: false
        enabled:
          type: boolean
          description: |
            Enables/disables media reading from the input source. 
            When channel is disabled, the server does not attempt to connect to the input media source.
            Useful for pausing a channel without losing its settings.
      additionalProperties: false
    ChannelStatus:
      type: object
      description: |
        Media reading/processing status for a single channel.

        - Clients MUST ignore unknown properties in responses.

      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: Unique numeric channel identifier.
          readOnly: true
        online:
          type: boolean
          description: |
            Indicates whether media reading from the input source is currently successful.

            - `true` ⇒ the server is currently reading/processing media successfully from the input source.
            - `false` ⇒ the server is **not** reading media successfully (re/connecting, network/connection issues (timeouts, auth), corrupted/unreadable media, any other errors in media reading/processing).

            Note: If `Channel.enabled` is turned off, the server does not attempt to read media — so online will always report as false.
          readOnly: true
      additionalProperties: true
      required: [id, online]

    ChannelStatusList:
      type: array
      description: A list of `ChannelStatus` objects.
      items:
        $ref: "#/components/schemas/ChannelStatus"

    Quota:
      type: object
      description: Quota information for the authenticated client.
      properties:
        limit:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: |
            Maximum concurrently enabled channels allowed for this client.
            `null` indicates unlimited quota.
        used:
          type: integer
          format: int64
          minimum: 0
          description: Current number of enabled channels.
        remaining:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: |
            `limit - used`, floored at 0.
            `null` when quota is unlimited.
      required: [limit, used, remaining]
