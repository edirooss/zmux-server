openapi: 3.0.3
info:
  title: Zmux Channels – Client API
  version: 0.0.1
  description: |
    B2B API for reading Zmux channels configuration and performing partial updates.

    - **Transport**: HTTPS only.
    - **Auth**: HTTP Basic over TLS.
    - **Correlation**: Clients MAY send `X-Request-Id`; the server echoes it or generates one.

security:
  - basicAuth: []

tags:
  - name: Channels
    description: Operations for managing and querying Zmux channels.

paths:
  /api/channels:
    get:
      tags: [Channels]
      summary: List channels
      operationId: listChannels
      description: |
        Returns all channels visible to the client; `[]` if the client has access to none.

      parameters:
        - $ref: '#/components/parameters/X-Request-Id'
      responses:
        '200':
          description: OK — array of authorized `Channel` objects, each representing a single channel as defined by its configuration; empty if none.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelList'
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '429': { $ref: '#/components/responses/429TooManyRequests' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
        '503': { $ref: '#/components/responses/503ServiceUnavailable' }

  /api/channels/{id}:
    patch:
      tags: [Channels]
      summary: Partially update a channel
      operationId: patchChannel
      description: |
        Applies a JSON Merge Patch (RFC 7396) to a channel configuration.

        ### RFC 7396 behavior spelled out
        - Omitting a field → the field **remains unchanged**.
        - Setting a field to `null` → the field is **cleared/removed**.
        - Setting an object to `{}` → merges nothing (no-op).
          - Successful patches return `204 No Content` regardless of whether any field changed.
          - If the current target is `null` or a non-object → the result becomes `{}` per RFC 7396.
        - Objects are merged recursively; nested fields follow the same rules.
        - Requires `Content-Type: application/merge-patch+json`.

      parameters:
        - in: path
          name: id
          required: true
          description: Unique numeric identifier of the channel.
          schema:
            type: integer
            format: int64
            minimum: 1
        - $ref: '#/components/parameters/X-Request-Id'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/ChannelPatchRequest'
      responses:
        '204':
          description: No Content — Channel updated successfully.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '415':
          description: Unsupported Media Type — only `application/merge-patch+json` is accepted for patch operations.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
        '422':
          description: |
            Unprocessable Content — patch request was well-formed but semantically invalid.

            - `enabled` is set to `true` while either `name` or `source` is `null`.
            - `source.auth` changes from `null` to an object with only `password` (without `username`; required).
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'

        '429': { $ref: '#/components/responses/429TooManyRequests' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
        '503': { $ref: '#/components/responses/503ServiceUnavailable' }

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: HTTP Basic authentication (username & password) over a secure TLS connection.

  headers:
    X-Request-Id:
      description: Opaque correlation ID for this request (the server echoes `X-Request-Id` or generates one if absent). Used for request correlation and troubleshooting.
      schema:
        type: string
    WWW-Authenticate:
      description: Indicates authentication requirements for the requested resource.
      schema:
        type: string
      example: Basic realm="Restricted"
    Retry-After:
      description: |
        Advises clients when to retry after a rate limit (`429`) or temporary downtime (`503`).

        The value MAY be either:
        - A delay in seconds (delta-seconds), e.g., `"60"`.
        - An absolute date and time in HTTP-date format, e.g., `"Wed, 21 Oct 2015 07:28:00 GMT"`.

        Clients SHOULD respect this hint before retrying.
      schema:
        oneOf:
          - type: string
            pattern: '^\d+$'
            description: Delay in seconds
          - type: string
            pattern: '^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), .+ GMT$'
            description: Specific retry date/time in HTTP-date format
      examples:
        deltaSeconds:
          summary: Delay in seconds
          value: '60'
        httpDate:
          summary: Specific retry date/time
          value: 'Wed, 21 Oct 2015 07:28:00 GMT'

  parameters:
    X-Request-Id:
      name: X-Request-Id
      in: header
      required: false
      description: Optional request ID for tracking; echoed by the server.
      schema:
        type: string
        maxLength: 200

  responses:
    400BadRequest:
      description: |
        Bad Request — request validation failed due to one or more of the following:
        - Malformed JSON syntax
        - Schema violations (i.e., incorrect data types or formats for defined fields)
        - Unknown or unexpected fields
        - Unauthorized access to restricted fields
        - Field value violates access policy (i.e., not permitted by allowlist/denylist rules)
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    401Unauthorized:
      description: Unauthorized — missing or invalid credentials.
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    404NotFound:
      description: |
        Not Found — the targeted resource does not exist, or access is intentionally obscured for entity endpoints (`404` is used instead of `403` to avoid leaking existence).
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    429TooManyRequests:
      description: Too Many Requests — rate limit exceeded.
      headers:
        Retry-After:
          $ref: '#/components/headers/Retry-After'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    500InternalServerError:
      description: Internal Server Error — unexpected condition occurred.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    503ServiceUnavailable:
      description: Service Unavailable — temporary downtime; try again later.
      headers:
        Retry-After:
          $ref: '#/components/headers/Retry-After'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'

  schemas:
    Channel:
      type: object
      description: Represents a single channel, defined by its configuration.
      properties:
        id:
          type: integer
          format: int64
          description: Unique numeric channel identifier.
          minimum: 1
          readOnly: true
        name:
          type: string
          nullable: true
          description: Channel display name.
          minLength: 1
          maxLength: 100
        source:
          type: object
          nullable: true
          description: Channel source connection details; URI and credentials.
          properties:
            uri:
              type: string
              format: uri
              description: A URI that identifies the source or destination of a multimedia stream.
              maxLength: 2048
            auth:
              type: object
              nullable: true
              description: |
                Authentication for the source. `null` if none.
              properties:
                username:
                  type: string
                  description: Username.
                  minLength: 1
                password:
                  type: string
                  nullable: true
                  description: Plain-text password (may be `null` if none).
                  minLength: 1
              additionalProperties: false
              required: [username]
          additionalProperties: false
          required: [uri]
        enabled:
          type: boolean
          description: |
            Indicates whether the channel is enabled — that is, whether media reading from the source is enabled.
            When the channel is disabled, the server does not attempt to connect to the media source.

            When `enabled` is `true`, both `name` and `source` are non-null.
      additionalProperties: false
      required: [id, enabled]

    ChannelList:
      type: array
      description: A list of `Channel` objects.
      items:
        $ref: '#/components/schemas/Channel'

    ChannelPatchRequest:
      description: |
        JSON Merge Patch body for channel updates.
        
        Use `ChannelUpdatePatch` to apply partial updates, or `ChannelClearPatch` to fully clear all channel fields and disable the channel.

        **Obfuscation**: Unauthorized field-level access → `400 Bad Request` (instead of `403`).

      oneOf:
        - $ref: '#/components/schemas/ChannelUpdatePatch'
        - $ref: '#/components/schemas/ChannelClearPatch'

    ChannelUpdatePatch:
      type: object
      description: Subset of channel fields to update.
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        source:
          type: object
          properties:
            uri:
              type: string
              format: uri
              maxLength: 2048
              description: >
                An **absolute URI** that specifies the source/destination of a multimedia stream.

                MUST follow the generic URI syntax [RFC 3986].
                MAY be further constrained or extended by the semantics of the specific protocol (scheme).

                URI syntax violations (e.g., malformed encoding, invalid structure) → `400 Bad Request`.

                ### Authentication

                Credentials in the URI `userinfo` (e.g., `username[:password]@`) are allowed but discouraged; prefer `source.auth`. **Never mix both**.
                  - If, after applying this PATCH (considering existing configuration + patch body), both a URI with `userinfo`
                    and a non-null `source.auth` would be present → `422 Unprocessable Content`.
                  - If `userinfo` is used, it MUST be encoded per RFC 3986 §3.2.1.

                ### Protocol-Specific Notes

                - **RTSP URIs** MUST conform to [RFC 2326].
                - Use the `rtsps` scheme for RTSP 1.0 over TLS.

                ### Access Policy (Allow/Deny Lists)

                The server MAY enforce internal allow/deny lists (aka whitelists/blacklists) over:
                - **Schemes, hostnames, ports, or any other URI component.**

                These lists MAY vary by client, tenant, or deployment. Any URI referencing a disallowed resource → `400 Bad Request`.

                ### References

                - [RFC 3986] Uniform Resource Identifier (URI): Generic Syntax
                - [RFC 2326] Real Time Streaming Protocol (RTSP) 1.0
            auth:
              type: object
              nullable: true
              description: |
                Authentication for the source.
                - If `null`: remove authentication.
                - If object: add or update credentials.

                A `password` cannot be set unless a `username` is included in the patch
                or already exists in the stored configuration. Violations result in `422 Unprocessable Content`.
              properties:
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  nullable: true
                  minLength: 1
              additionalProperties: false
          additionalProperties: false
        enabled:
          type: boolean
          description: |
            Enables/disables media reading from the source. This is used to pause or resume a channel while preserving its existing settings.

            - When `enabled: true`, both `name` and `source` must be non-null and valid — either already configured or included in this patch. Violations result in a `422 Unprocessable Content`.
            - When `enabled: false`, the server will not attempt to connect to the media source.
      additionalProperties: false

    ChannelClearPatch:
      type: object
      description: Used to reset channel object to null/disabled.
      additionalProperties: false
      required: [enabled, name, source]
      properties:
        enabled:
          type: boolean
          enum: [false]
        name:
          nullable: true
          enum: [null]
        source:
          nullable: true
          enum: [null]
