openapi: 3.0.3
info:
  title: Zmux Channels – Client API
  version: 1.0.0
  description: |
    B2B API for reading Zmux channels configuration and performing partial updates.

    - **Transport**: HTTPS only.
    - **Auth**: HTTP Basic over TLS.
    - **Correlation**: Clients MAY send `X-Request-Id`; the server echoes it or generates one.

security:
  - basicAuth: []

tags:
  - name: Channels
    description: Operations for managing and querying Zmux channels.

paths:
  /api/channels:
    get:
      tags: [Channels]
      summary: List channel configurations
      operationId: listChannels
      description: |
        Returns all channels visible to the client.

        - `200` with `[]` when no channels are authorized.
        - `404` if the client is not permitted to use this endpoint (obscure existence).

      parameters:
        - $ref: '#/components/parameters/X-Request-Id'
      responses:
        '200':
          description: OK — array of authorized `Channel` objects, each representing a single channel as defined by its configuration; empty if none.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control-Channels'
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelList'
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '429': { $ref: '#/components/responses/429TooManyRequests' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
        '503': { $ref: '#/components/responses/503ServiceUnavailable' }

  /api/channels/{id}:
    patch:
      tags: [Channels]
      summary: Partially update a channel
      operationId: patchChannel
      description: |
        Applies a JSON Merge Patch (RFC 7396) to a channel configuration.

        ### RFC 7396 behavior quick brief
        - Omitting a field → the field **remains unchanged**.
        - Setting a field to `null` → the field is **cleared/removed**.
        - Setting an **object** field to `{}`:
          - If the current value is an object → **no-op** (unchanged).
          - If the current value is `null` → it becomes `{}` (created).
        - Successful patches return `204 No Content` even if nothing changed.
        - Objects are merged recursively; nested fields follow the same rules.
        - Requires `Content-Type: application/merge-patch+json`.

      parameters:
        - in: path
          name: id
          required: true
          description: Unique numeric identifier of the channel.
          schema:
            type: integer
            format: int64
            minimum: 1
        - $ref: '#/components/parameters/X-Request-Id'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/ChannelPatchRequest'
      responses:
        '204':
          description: No Content — Channel updated successfully.
          headers:
            Cache-Control:
              $ref: '#/components/headers/Cache-Control-NoStore'

            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
        '400': { $ref: '#/components/responses/400BadRequest' }
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '415':
          description: Unsupported Media Type — only `application/merge-patch+json` is accepted for patch operations.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
        '422':
          description: |
            Unprocessable Content — patch request was well-formed but semantically invalid.

            - After applying the patch, `input.url` is non-null and `name` is null.
            - After applying the patch, `enabled` is `true` and (`input.url` is null or `name` is null).
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'

        '429': { $ref: '#/components/responses/429TooManyRequests' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
        '503': { $ref: '#/components/responses/503ServiceUnavailable' }

  /api/channels/status:
    get:
      tags: [Channels]
      summary: List channel statuses
      operationId: listChannelStatuses
      description: |
        Returns the online/offline runtime status for all channels visible to the client.

        - `200` with `[]` when no channels are authorized.
        - `404` if the client is not permitted to use this endpoint (obscure existence).

      parameters:
        - $ref: '#/components/parameters/X-Request-Id'
      responses:
        '200':
          description: OK — array of authorized `ChannelStatus` objects; empty if none.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/X-Request-Id'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control-NoStore'
          
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelStatusList'
              examples:
                sample:
                  summary: Example status list
                  value:
                    - id: 1
                      online: true
                    - id: 2
                      online: false
                    - id: 7
                      online: false
        '401': { $ref: '#/components/responses/401Unauthorized' }
        '404': { $ref: '#/components/responses/404NotFound' }
        '429': { $ref: '#/components/responses/429TooManyRequests' }
        '500': { $ref: '#/components/responses/500InternalServerError' }
        '503': { $ref: '#/components/responses/503ServiceUnavailable' }

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: HTTP Basic authentication (username & password) over a secure TLS connection.

  headers:
    X-Request-Id:
      description: Opaque correlation ID for this request (the server echoes `X-Request-Id` or generates one if absent). Used for request correlation and troubleshooting.
      schema:
        type: string
        minLength: 1
        maxLength: 64
    Cache-Control-Channels:
      description: Cache-Control policy for /channels endpoint.
      schema:
        type: string
        default: private, max-age=60, must-revalidate
    Cache-Control-NoStore:
      description: Cache-Control policy for sensitive/dynamic endpoints.
      schema:
        type: string
        default: no-store

    WWW-Authenticate:
      description: Indicates authentication requirements for the requested resource.
      schema:
        type: string
      example: Basic realm="Restricted"
    Retry-After:
      description: |
        Advises clients when to retry after a rate limit (`429`) or temporary downtime (`503`).

        The value MAY be either:
        - A delay in seconds (delta-seconds), e.g., `"60"`.
        - An absolute date/time in HTTP-date (IMF-fixdate) format, e.g., "Wed, 21 Oct 2015 07:28:00 GMT".

        Clients SHOULD respect this hint before retrying.
      schema:
        type: string
      examples:
        deltaSeconds:
          summary: Delay in seconds
          value: '60'
        httpDate:
          summary: Specific retry date/time
          value: 'Wed, 21 Oct 2015 07:28:00 GMT'

  parameters:
    X-Request-Id:
      name: X-Request-Id
      in: header
      required: false
      description: Optional request ID for tracking; echoed by the server.
      schema:
        type: string
        minLength: 1
        maxLength: 64

  responses:
    400BadRequest:
      description: |
        Bad Request — request validation failed due to one or more of the following:
        - Malformed JSON syntax
        - Schema violations (i.e., incorrect data types or formats for defined fields)
        - Unknown or unexpected fields
        - Unauthorized field-level access (`400` is used instead of `403` to avoid leaking existence)
        - Field value violates access policy (i.e., not permitted by allowlist/denylist rules. `400` is used instead of `403` to avoid leaking existence)
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    401Unauthorized:
      description: Unauthorized — missing or invalid credentials.
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    404NotFound:
      description: |
        Not Found — the targeted resource does not exist, or access is intentionally obscured for entity and collection endpoints (`404` is used instead of `403` to avoid leaking existence).
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    429TooManyRequests:
      description: Too Many Requests — rate limit exceeded.
      headers:
        Retry-After:
          $ref: '#/components/headers/Retry-After'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    500InternalServerError:
      description: Internal Server Error — unexpected condition occurred.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'
    503ServiceUnavailable:
      description: Service Unavailable — temporary downtime; try again later.
      headers:
        Retry-After:
          $ref: '#/components/headers/Retry-After'
        X-Request-Id:
          $ref: '#/components/headers/X-Request-Id'

  schemas:
    Channel:
      type: object
      description: Represents a single channel, defined by its configuration.
      properties:
        id:
          type: integer
          format: int64
          description: Unique numeric channel identifier.
          minimum: 1
          readOnly: true
        name:
          type: string
          nullable: true
          description: Channel display name.
          minLength: 1
          maxLength: 100
        input:
          type: object
          description: Channel input media source configuration.
          properties:
            url:
              type: string
              nullable: true
              format: uri
              pattern: '^[A-Za-z][A-Za-z0-9+.-]*:'
              description: |
                A URL that identifies the source or destination of a multimedia stream.

                Note: When `input.url` is non-null, `name` is also non-null.
              maxLength: 2048
          additionalProperties: false
        enabled:
          type: boolean
          description: |
            Channel activation state.
            
            Indicates whether the channel is enabled — that is, whether media reading from the input source is enabled.
            When the channel is disabled, the server does not attempt to connect to the input media source.

            Note: When `enabled` is `true`, `input.url` and `name` is non-null.
      additionalProperties: false
      required: [id, input, enabled]

    ChannelList:
      type: array
      description: A list of `Channel` objects.
      items:
        $ref: '#/components/schemas/Channel'

    ChannelPatchRequest:
      description: |
        Subset of channel fields to update.

        #### Cross-field constraints (evaluated **after** applying the JSON Merge Patch)
        - Input media source URL requires a channel display name: 
          if `input.url` is non-null and `name` is null → **422 Unprocessable Content**.
        - Channel activation requires both input media source URL and channel display name:
          if `enabled` is `true` and (`input.url` is null or `name` is null) → **422 Unprocessable Content**.
        
      type: object
      properties:
        name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
        input:
          type: object
          properties:
            url:
              type: string
              nullable: true
              format: uri
              pattern: '^[A-Za-z][A-Za-z0-9+.-]*:'
              maxLength: 2048
              description: >
                An **absolute URL** that specifies the source/destination of a multimedia stream.

                MUST follow the generic URI syntax [RFC 3986].
                MAY be further constrained or extended by the semantics of the specific protocol (scheme).

                URI syntax violations (e.g., malformed encoding, invalid structure) → `400 Bad Request`.

                ### Authentication

                Authentication, when required, MUST be provided via RFC 3986 URI `userinfo` (e.g., `username[:password]@`).
                `userinfo` MUST be percent-encoded per RFC 3986 §3.2.1.

                ### Protocol-Specific Notes

                - **RTSP URIs** MUST conform to [RFC 2326]. RTSP support & versioning:
                    - Supported: RTSP 1.0 (RFC 2326), including `rtsps://` (RTSP 1.0 over TLS).
                    - Not supported: RTSP 2.0 (RFC 7826).
                    - For `rtsps://`, the service forces TCP interleaving so that control and media traverse the TLS connection; if the server requires UDP under `rtsps://`, the connection fails.

                ### Access Policy (Allow/Deny Lists)

                The server MAY enforce internal allow/deny lists over schemes, hostnames, ports, or any other URI component.
                These lists MAY vary by client, tenant, or deployment. Any URI referencing a disallowed resource → `400 Bad Request`.

                ### References

                - [RFC 3986] Uniform Resource Identifier (URI): Generic Syntax
                - [RFC 2326] Real Time Streaming Protocol (RTSP) 1.0

                ### Note: Input URL & Name Dependency
                - `input.url` with `name` null (not already configured or included in this patch) → `422 Unprocessable Content`.
          additionalProperties: false
        enabled:
          type: boolean
          description: |
            Enables/disables media reading from the input source. 
            When channel is disabled, the server does not attempt to connect to the input media source.
            Useful for pausing a channel without losing its settings.

            ### Note: Enabled & Input URL/Name Dependency
            - `enabled: true` with `input.url` null (not already configured or included in this patch) → `422 Unprocessable Content`.
            - `enabled: true` with `name` null (not already configured or included in this patch) → `422 Unprocessable Content`.
          additionalProperties: false

    ChannelStatus:
      type: object
      description: Media reading/processing status for a single channel.
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: Unique numeric channel identifier.
          readOnly: true
        online:
          type: boolean
          description: |
            Indicates whether media reading from the input source is currently successful.

            - `true` ⇒ the server is currently reading/processing media successfully from the input source.
            - `false` ⇒ the server is **not** reading media successfully (re/connecting, network/connection issues (timeouts, auth), corrupted/unreadable media, any other errors in media reading/processing).

            Note: If `Channel.enabled` is turned off, the server does not attempt to read media — so online will always report as false.
      
      additionalProperties: false
      required: [id, online]

    ChannelStatusList:
      type: array
      description: A list of `ChannelStatus` objects.
      items:
        $ref: '#/components/schemas/ChannelStatus'

